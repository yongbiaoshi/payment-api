/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tsingda.service.payment.api.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-09")
public class TAccount implements org.apache.thrift.TBase<TAccount, TAccount._Fields>, java.io.Serializable, Cloneable, Comparable<TAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAccount");

  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField FROZEN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenStatus", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField ACCOUNT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountSource", org.apache.thrift.protocol.TType.I16, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAccountTupleSchemeFactory());
  }

  public String accountId; // optional
  public String userId; // optional
  public double balance; // optional
  public short type; // required
  public short frozenStatus; // required
  public short accountSource; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_ID((short)1, "accountId"),
    USER_ID((short)2, "userId"),
    BALANCE((short)3, "balance"),
    TYPE((short)4, "type"),
    FROZEN_STATUS((short)5, "frozenStatus"),
    ACCOUNT_SOURCE((short)6, "accountSource");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // BALANCE
          return BALANCE;
        case 4: // TYPE
          return TYPE;
        case 5: // FROZEN_STATUS
          return FROZEN_STATUS;
        case 6: // ACCOUNT_SOURCE
          return ACCOUNT_SOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BALANCE_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __FROZENSTATUS_ISSET_ID = 2;
  private static final int __ACCOUNTSOURCE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ACCOUNT_ID,_Fields.USER_ID,_Fields.BALANCE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FROZEN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("frozenStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ACCOUNT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("accountSource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAccount.class, metaDataMap);
  }

  public TAccount() {
    this.frozenStatus = (short)0;

  }

  public TAccount(
    short type,
    short frozenStatus,
    short accountSource)
  {
    this();
    this.type = type;
    setTypeIsSet(true);
    this.frozenStatus = frozenStatus;
    setFrozenStatusIsSet(true);
    this.accountSource = accountSource;
    setAccountSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAccount(TAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAccountId()) {
      this.accountId = other.accountId;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    this.balance = other.balance;
    this.type = other.type;
    this.frozenStatus = other.frozenStatus;
    this.accountSource = other.accountSource;
  }

  public TAccount deepCopy() {
    return new TAccount(this);
  }

  @Override
  public void clear() {
    this.accountId = null;
    this.userId = null;
    setBalanceIsSet(false);
    this.balance = 0.0;
    setTypeIsSet(false);
    this.type = 0;
    this.frozenStatus = (short)0;

    setAccountSourceIsSet(false);
    this.accountSource = 0;
  }

  public String getAccountId() {
    return this.accountId;
  }

  public TAccount setAccountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  public void unsetAccountId() {
    this.accountId = null;
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return this.accountId != null;
  }

  public void setAccountIdIsSet(boolean value) {
    if (!value) {
      this.accountId = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public TAccount setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public double getBalance() {
    return this.balance;
  }

  public TAccount setBalance(double balance) {
    this.balance = balance;
    setBalanceIsSet(true);
    return this;
  }

  public void unsetBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  public void setBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
  }

  public short getType() {
    return this.type;
  }

  public TAccount setType(short type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public short getFrozenStatus() {
    return this.frozenStatus;
  }

  public TAccount setFrozenStatus(short frozenStatus) {
    this.frozenStatus = frozenStatus;
    setFrozenStatusIsSet(true);
    return this;
  }

  public void unsetFrozenStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENSTATUS_ISSET_ID);
  }

  /** Returns true if field frozenStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENSTATUS_ISSET_ID);
  }

  public void setFrozenStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENSTATUS_ISSET_ID, value);
  }

  public short getAccountSource() {
    return this.accountSource;
  }

  public TAccount setAccountSource(short accountSource) {
    this.accountSource = accountSource;
    setAccountSourceIsSet(true);
    return this;
  }

  public void unsetAccountSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTSOURCE_ISSET_ID);
  }

  /** Returns true if field accountSource is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountSource() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTSOURCE_ISSET_ID);
  }

  public void setAccountSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTSOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((Double)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Short)value);
      }
      break;

    case FROZEN_STATUS:
      if (value == null) {
        unsetFrozenStatus();
      } else {
        setFrozenStatus((Short)value);
      }
      break;

    case ACCOUNT_SOURCE:
      if (value == null) {
        unsetAccountSource();
      } else {
        setAccountSource((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_ID:
      return getAccountId();

    case USER_ID:
      return getUserId();

    case BALANCE:
      return getBalance();

    case TYPE:
      return getType();

    case FROZEN_STATUS:
      return getFrozenStatus();

    case ACCOUNT_SOURCE:
      return getAccountSource();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_ID:
      return isSetAccountId();
    case USER_ID:
      return isSetUserId();
    case BALANCE:
      return isSetBalance();
    case TYPE:
      return isSetType();
    case FROZEN_STATUS:
      return isSetFrozenStatus();
    case ACCOUNT_SOURCE:
      return isSetAccountSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAccount)
      return this.equals((TAccount)that);
    return false;
  }

  public boolean equals(TAccount that) {
    if (that == null)
      return false;

    boolean this_present_accountId = true && this.isSetAccountId();
    boolean that_present_accountId = true && that.isSetAccountId();
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (!this.accountId.equals(that.accountId))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_balance = true && this.isSetBalance();
    boolean that_present_balance = true && that.isSetBalance();
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (this.balance != that.balance)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_frozenStatus = true;
    boolean that_present_frozenStatus = true;
    if (this_present_frozenStatus || that_present_frozenStatus) {
      if (!(this_present_frozenStatus && that_present_frozenStatus))
        return false;
      if (this.frozenStatus != that.frozenStatus)
        return false;
    }

    boolean this_present_accountSource = true;
    boolean that_present_accountSource = true;
    if (this_present_accountSource || that_present_accountSource) {
      if (!(this_present_accountSource && that_present_accountSource))
        return false;
      if (this.accountSource != that.accountSource)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_accountId = true && (isSetAccountId());
    list.add(present_accountId);
    if (present_accountId)
      list.add(accountId);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_balance = true && (isSetBalance());
    list.add(present_balance);
    if (present_balance)
      list.add(balance);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_frozenStatus = true;
    list.add(present_frozenStatus);
    if (present_frozenStatus)
      list.add(frozenStatus);

    boolean present_accountSource = true;
    list.add(present_accountSource);
    if (present_accountSource)
      list.add(accountSource);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenStatus()).compareTo(other.isSetFrozenStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenStatus, other.frozenStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountSource()).compareTo(other.isSetAccountSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountSource, other.accountSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAccount(");
    boolean first = true;

    if (isSetAccountId()) {
      sb.append("accountId:");
      if (this.accountId == null) {
        sb.append("null");
      } else {
        sb.append(this.accountId);
      }
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetBalance()) {
      if (!first) sb.append(", ");
      sb.append("balance:");
      sb.append(this.balance);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenStatus:");
    sb.append(this.frozenStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountSource:");
    sb.append(this.accountSource);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'accountSource' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAccountStandardSchemeFactory implements SchemeFactory {
    public TAccountStandardScheme getScheme() {
      return new TAccountStandardScheme();
    }
  }

  private static class TAccountStandardScheme extends StandardScheme<TAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountId = iprot.readString();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balance = iprot.readDouble();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.type = iprot.readI16();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FROZEN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.frozenStatus = iprot.readI16();
              struct.setFrozenStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCOUNT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.accountSource = iprot.readI16();
              struct.setAccountSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAccountSource()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountSource' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accountId != null) {
        if (struct.isSetAccountId()) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBalance()) {
        oprot.writeFieldBegin(BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.balance);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI16(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZEN_STATUS_FIELD_DESC);
      oprot.writeI16(struct.frozenStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_SOURCE_FIELD_DESC);
      oprot.writeI16(struct.accountSource);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAccountTupleSchemeFactory implements SchemeFactory {
    public TAccountTupleScheme getScheme() {
      return new TAccountTupleScheme();
    }
  }

  private static class TAccountTupleScheme extends TupleScheme<TAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.type);
      oprot.writeI16(struct.accountSource);
      BitSet optionals = new BitSet();
      if (struct.isSetAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetBalance()) {
        optionals.set(2);
      }
      if (struct.isSetFrozenStatus()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAccountId()) {
        oprot.writeString(struct.accountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetBalance()) {
        oprot.writeDouble(struct.balance);
      }
      if (struct.isSetFrozenStatus()) {
        oprot.writeI16(struct.frozenStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = iprot.readI16();
      struct.setTypeIsSet(true);
      struct.accountSource = iprot.readI16();
      struct.setAccountSourceIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.accountId = iprot.readString();
        struct.setAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.balance = iprot.readDouble();
        struct.setBalanceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.frozenStatus = iprot.readI16();
        struct.setFrozenStatusIsSet(true);
      }
    }
  }

}

